{"version":3,"file":"ngx-easy-table.umd.min.js","sources":["~/ngx-easy-table/src/app/ngx-easy-table/services/resource-service.ts","~/ngx-easy-table/src/app/ngx-easy-table/services/config-service.ts","~/ngx-easy-table/src/app/ngx-easy-table/model/event.enum.ts","~/ngx-easy-table/src/app/ngx-easy-table/services/logger.service.ts","~/ngx-easy-table/src/app/ngx-easy-table/components/base/base.component.ts","~/ngx-easy-table/src/app/ngx-easy-table/components/global-search/global-search.component.ts","~/ngx-easy-table/src/app/ngx-easy-table/pipes/global-search-pipe.ts","~/ngx-easy-table/src/app/ngx-easy-table/pipes/header-pipe.ts","~/ngx-easy-table/src/app/ngx-easy-table/components/header/header.component.ts","~/ngx-easy-table/src/app/ngx-easy-table/components/pagination/pagination.component.ts","~/ngx-easy-table/src/app/ngx-easy-table/components/csv-export.component.ts","../../../node_modules/ngx-pagination/dist/ngx-pagination.js","~/ngx-easy-table/src/app/ngx-easy-table/components/base/base.module.ts","~/ngx-easy-table/src/app/ngx-easy-table/table.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nexport class ResourceService {\npublic data: Array<any> = [];\npublic key: string;\npublic order: Array<any> = [];\n/**\n * @param {?} key\n * @return {?}\n */\npublic sortBy(key: string): Array<any> {\n    this.key = key;\n    if (Object.keys(this.order).length === 0) {\n      this.order[this.key] = 'asc';\n    }\n    if (this.order[this.key] === 'asc') {\n      this.order = [];\n      this.order[this.key] = 'desc';\n      this.data.sort((a, b) => this.compare(a, b));\n    } else {\n      this.order = [];\n      this.order[this.key] = 'asc';\n      this.data.sort((a, b) => this.compare(b, a));\n    }\n    return this.data;\n  }\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nprivate compare(a: Array<any>, b: Array<any>): number {\n    if ((isNaN(parseFloat(a[this.key])) || !isFinite(a[this.key])) || (isNaN(parseFloat(b[this.key])) || !isFinite(b[this.key]))) {\n      if (a[this.key] + ''.toLowerCase() < b[this.key] + ''.toLowerCase()) {\n        return -1;\n      }\n      if (a[this.key] + ''.toLowerCase() > b[this.key] + ''.toLowerCase()) {\n        return 1;\n      }\n    } else {\n      if (parseFloat(a[this.key]) < parseFloat(b[this.key])) {\n        return -1;\n      }\n      if (parseFloat(a[this.key]) > parseFloat(b[this.key])) {\n        return 1;\n      }\n    }\n\n    return 0;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ResourceService_tsickle_Closure_declarations() {\n/** @type {?} */\nResourceService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nResourceService.ctorParameters;\n/** @type {?} */\nResourceService.prototype.data;\n/** @type {?} */\nResourceService.prototype.key;\n/** @type {?} */\nResourceService.prototype.order;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../model/config';\nexport class ConfigService {\npublic static config: Config = {\n    searchEnabled: false,\n    headerEnabled: true,\n    orderEnabled: true,\n    globalSearchEnabled: false,\n    paginationEnabled: true,\n    exportEnabled: false,\n    clickEvent: true,\n    selectRow: false,\n    selectCol: false,\n    selectCell: false,\n    rows: 10,\n    additionalActions: false,\n    serverPagination: false,\n    isLoading: true,\n    detailsTemplate: false,\n    groupRows: false,\n    paginationRangeEnabled: true,\n  };\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ConfigService_tsickle_Closure_declarations() {\n/** @type {?} */\nConfigService.config;\n/** @type {?} */\nConfigService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConfigService.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport type Event = number;\nexport let Event: any = {};\nEvent.onPagination = 0;\nEvent.onOrder = 1;\nEvent.onGlobalSearch = 2;\nEvent.onSearch = 3;\nEvent.onClick = 4;\nEvent[Event.onPagination] = \"onPagination\";\nEvent[Event.onOrder] = \"onOrder\";\nEvent[Event.onGlobalSearch] = \"onGlobalSearch\";\nEvent[Event.onSearch] = \"onSearch\";\nEvent[Event.onClick] = \"onClick\";\n\n","import { Injectable } from '@angular/core';\nexport class LoggerService {\n/**\n * @param {?=} message\n * @return {?}\n */\nerror(message?: any) {\n    console.error(message);\n  }\n/**\n * @param {?=} message\n * @return {?}\n */\nwarn(message?: any) {\n    console.warn(message);\n  }\n/**\n * @param {?=} message\n * @return {?}\n */\ninfo(message?: any) {\n    console.log(message);\n  }\n/**\n * @param {?=} message\n * @return {?}\n */\ndebug(message?: any) {\n    console.log(message);\n  }\n/**\n * @param {?=} message\n * @return {?}\n */\nlog(message?: any) {\n    console.log(message);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LoggerService_tsickle_Closure_declarations() {\n/** @type {?} */\nLoggerService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLoggerService.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, Input, OnChanges,\n  OnInit, Output,\n  SimpleChange, SimpleChanges, TemplateRef\n} from '@angular/core';\n\nimport { ResourceService } from '../../services/resource-service';\nimport { ConfigService } from '../../services/config-service';\nimport { Event } from '../../model/event.enum';\nimport { LoggerService } from '../../services/logger.service';\nimport { Config } from '../../model/config';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/from';\nimport'rxjs/add/operator/mergeMap';\nimport'rxjs/add/operator/reduce';\nimport'rxjs/add/operator/groupBy';\nexport class BaseComponent implements OnInit, OnChanges, AfterViewInit {\npublic selectedRow: number;\npublic selectedCol: number;\npublic term;\npublic config: Config;\npublic globalSearchTerm;\n  grouped = [];\n  menuActive = false;\n  page = 1;\n  count = null;\n  limit;\n  selectedDetailsTemplateRowId = null;\n  id;\n   configuration: Config;\n   data: Array<Object>;\n   pagination;\n   groupRowsBy;\n   detailsTemplate;\n   columns: Array<string>;\n   event = new EventEmitter();\npublic rowTemplate: TemplateRef<any>;\n/**\n * @param {?} resource\n * @param {?} cdr\n * @param {?} logger\n */\nconstructor(public resource: ResourceService,\nprivate cdr: ChangeDetectorRef,\nprivate logger: LoggerService) {\n    // make random pagination ID to avoid situation when we have more than 1 table at page\n    this.id = Math.floor((Math.random() * 10000) + 1);\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.configuration) {\n      ConfigService.config = this.configuration;\n    }\n    this.config = ConfigService.config;\n    this.limit = this.configuration.rows;\n    if (this.groupRowsBy) {\n      Observable\n        .from(this.data)\n        .groupBy(row => row[this.groupRowsBy])\n        .flatMap(group => group.reduce((acc: Array<Object>, curr) => [...acc, curr], []))\n        .subscribe(row => this.grouped.push(row));\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit(): void {\n    this.cdr.detectChanges();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ data: SimpleChange = changes.data;\n    const /** @type {?} */ pagination: SimpleChange = changes.pagination;\n    if (data && data.currentValue) {\n      this.data = [...data.currentValue];\n    }\n    if (pagination && pagination.currentValue) {\n      this.count = pagination.currentValue.count;\n    }\n  }\n/**\n * @param {?} key\n * @return {?}\n */\norderBy(key: string) {\n    if (ConfigService.config.orderEnabled || !ConfigService.config.serverPagination) {\n      this.data = this.resource.sortBy(key);\n      this.data = [...this.data];\n    }\n    this.onOrder(key);\n  }\n/**\n * @param {?} $event\n * @param {?} row\n * @param {?} key\n * @param {?} colIndex\n * @param {?} rowIndex\n * @return {?}\n */\nclickedCell($event: object, row: object, key: string | number | boolean, colIndex: number, rowIndex: number): void {\n    if (ConfigService.config.selectRow) {\n      this.selectedRow = rowIndex;\n    }\n    if (ConfigService.config.selectCol) {\n      this.selectedCol = colIndex;\n    }\n    if (ConfigService.config.selectCell) {\n      this.selectedRow = rowIndex;\n      this.selectedCol = colIndex;\n    }\n    if (ConfigService.config.clickEvent) {\n      const /** @type {?} */ value = {\n        event: $event,\n        row: row,\n        key: key,\n        rowId: rowIndex,\n        colId: colIndex\n      };\n      this.emitEvent(Event.onClick, value);\n    }\n  }\n/**\n * @param {?} colIndex\n * @return {?}\n */\ntoggleColumn(colIndex): void {\n    const /** @type {?} */ toggleColumns = new Set(this.columns);\n    if (toggleColumns.has(colIndex)) {\n      toggleColumns.delete(colIndex);\n    } else {\n      toggleColumns.add(colIndex);\n    }\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\nonSearch($event): void {\n    if (!ConfigService.config.serverPagination) {\n      this.term = $event;\n    }\n    this.emitEvent(Event.onSearch, $event);\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\nonGlobalSearch($event): void {\n    if (!ConfigService.config.serverPagination) {\n      this.globalSearchTerm = $event;\n    }\n    this.emitEvent(Event.onGlobalSearch, $event);\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\nonPagination($event): void {\n    this.page = $event.page;\n    this.limit = $event.limit;\n    this.emitEvent(Event.onPagination, $event);\n  }\n/**\n * @param {?} key\n * @return {?}\n */\nonOrder(key): void {\n    const /** @type {?} */ value = {\n      key,\n      order: this.resource.order[key]\n    };\n    this.emitEvent(Event.onOrder, value);\n  }\n/**\n * @param {?} event\n * @param {?} value\n * @return {?}\n */\nprivate emitEvent(event, value: Object): void {\n \n    this.event.emit({ event: Event[event], value });\n  }\n/**\n * @param {?} rowIndex\n * @return {?}\n */\nselectRowId(rowIndex) {\n    if (this.selectedDetailsTemplateRowId === rowIndex) {\n      this.selectedDetailsTemplateRowId = null;\n    } else {\n      this.selectedDetailsTemplateRowId = rowIndex;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngx-table',\n  providers: [ResourceService, LoggerService, ConfigService],\n  template: `\n    <div class=\"ngx-container\">\n      <div class=\"ngx-columns\">\n        <div class=\"ngx-column ngx-col-4 ngx-col-mr-auto\"></div>\n        <div class=\"ngx-column ngx-col-3\">\n          <global-search\n            *ngIf=\"config.globalSearchEnabled\"\n            (globalUpdate)=\"onGlobalSearch($event)\">\n          </global-search>\n        </div>\n      </div>\n      <div class=\"ngx-columns\">\n        <table class=\"ngx-table ngx-table-striped ngx-table-hover\">\n          <thead>\n          <tr class=\"ngx-table__header\" *ngIf=\"config.headerEnabled\">\n            <ng-container *ngFor=\"let column of columns\">\n              <th class=\"ngx-table__header-cell\"\n                  (click)=\"orderBy(column['key'])\">\n                <div class=\"ngx-d-inline\">{{ column['title'] }}</div>\n                <span *ngIf=\"resource.order[column['key']]==='asc' \"\n                      [style.display]=\"config.orderEnabled?'':'none' \"\n                      class=\"ngx-icon ngx-icon-arrow-up\">\n                </span>\n                <span *ngIf=\"resource.order[column['key']]==='desc' \"\n                      [style.display]=\"config.orderEnabled?'':'none' \"\n                      class=\"ngx-icon ngx-icon-arrow-down\">\n                </span>\n              </th>\n            </ng-container>\n            <th *ngIf=\"config.additionalActions || config.detailsTemplate\"\n                class=\"ngx-table__header-cell-additional-actions\">\n              <div class=\"ngx-dropdown ngx-active ngx-dropdown-right\"\n                   *ngIf=\"config.additionalActions\"\n                   [class.ngx-active]=\"menuActive\">\n                <a class=\"ngx-btn ngx-btn-link\" (click)=\"menuActive = !menuActive\">\n                  <span class=\"ngx-icon ngx-icon-menu\"></span>\n                </a>\n                <ul class=\"ngx-menu ngx-table__table-menu\">\n                  <li class=\"ngx-menu-item\">\n                    <csv-export *ngIf=\"config.exportEnabled\"></csv-export>\n                  </li>\n                </ul>\n              </div>\n            </th>\n          </tr>\n          <tr *ngIf=\"config.searchEnabled\"\n              class=\"ngx-table__sortHeader\">\n            <ng-container *ngFor=\"let column of columns\">\n              <th>\n                <table-header (update)=\"onSearch($event)\" [column]=\"column\"></table-header>\n              </th>\n            </ng-container>\n            <th *ngIf=\"config.additionalActions || config.detailsTemplate\"></th>\n          </tr>\n          </thead>\n          <tbody *ngIf=\"data && !config.isLoading\">\n          <ng-container *ngIf=\"rowTemplate\">\n            <tr *ngFor=\"let row of data | search : term | global : globalSearchTerm | paginate: { itemsPerPage: limit, currentPage: page, totalItems: count, id: id };\n                  let rowIndex = index\"\n                (click)=\"clickedCell($event, row, '', '', rowIndex)\"\n                [class.ngx-table__table-row--selected]=\"rowIndex == selectedRow && !config.selectCell\">\n              <ng-container [ngTemplateOutlet]=\"rowTemplate\"\n                            [ngTemplateOutletContext]=\"{ $implicit: row }\">\n              </ng-container>\n            </tr>\n          </ng-container>\n          <ng-container *ngIf=\"!rowTemplate && !config.groupRows\">\n            <ng-container\n              *ngFor=\"let row of data | search : term | global : globalSearchTerm | paginate: { itemsPerPage: limit, currentPage: page, totalItems: count, id: id };\n                      let rowIndex = index\"\n              [class.ngx-table__table-row--selected]=\"rowIndex == selectedRow && !config.selectCell\">\n              <tr>\n                <ng-container *ngFor=\"let column of columns; let colIndex = index\">\n                  <td (click)=\"clickedCell($event, row, column['key'], colIndex, rowIndex)\"\n                      [class.ngx-table__table-col--selected]=\"colIndex == selectedCol && !config.selectCell\"\n                      [class.ngx-table__table-cell--selected]=\"colIndex == selectedCol && rowIndex == selectedRow && !config.selectCol && !config.selectRow\"\n                  >\n                    <div>{{ row[column['key']] }}</div>\n                  </td>\n                </ng-container>\n                <td *ngIf=\"config.additionalActions || config.detailsTemplate\">\n                  <span class=\"ngx-icon ngx-c-hand\"\n                        [class.ngx-icon-arrow-down]=\"selectedDetailsTemplateRowId === rowIndex\"\n                        [class.ngx-icon-arrow-right]=\"selectedDetailsTemplateRowId !== rowIndex\"\n                        (click)=\"selectRowId(rowIndex)\">\n                  </span>\n                </td>\n              </tr>\n              <tr *ngIf=\"config.detailsTemplate && selectedDetailsTemplateRowId === rowIndex\">\n                <td [attr.colspan]=\"columns.length + 1\">\n                  <ng-container\n                    [ngTemplateOutlet]=\"detailsTemplate\"\n                    [ngTemplateOutletContext]=\"{ $implicit: row }\">\n                  </ng-container>\n                </td>\n              </tr>\n            </ng-container>\n          </ng-container>\n          <ng-container *ngIf=\"!rowTemplate && config.groupRows\">\n            <ng-container\n              *ngFor=\"let group of grouped; let rowIndex = index\">\n              <tr>\n                <td [attr.colspan]=\"columns.length\">\n                  <div>{{group[0][groupRowsBy]}} ({{group.length}})</div>\n                </td>\n                <td>\n                  <span class=\"ngx-icon ngx-c-hand\"\n                        [class.ngx-icon-arrow-down]=\"selectedDetailsTemplateRowId === rowIndex\"\n                        [class.ngx-icon-arrow-right]=\"selectedDetailsTemplateRowId !== rowIndex\"\n                        (click)=\"selectRowId(rowIndex)\">\n                  </span>\n                </td>\n              </tr>\n              <ng-container *ngIf=\"selectedDetailsTemplateRowId === rowIndex\">\n                <tr *ngFor=\"let row of group\">\n                  <td *ngFor=\"let column of columns\">\n                    {{row[column['key']]}}\n                    <!-- TODO allow users to add groupRowsTemplateRef -->\n                  </td>\n                  <td></td>\n                </tr>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n          </tbody>\n          <tbody *ngIf=\"!data\">\n          <tr class=\"ngx-table__body-empty\">\n            <td>No results</td>\n          </tr>\n          </tbody>\n          <tbody *ngIf=\"config.isLoading\">\n          <tr class=\"ngx-table__body-loading\">\n            <td>\n              <div class=\"ngx-table__table-loader\"></div>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </div>\n      <pagination\n        *ngIf=\"config.paginationEnabled\"\n        [id]=\"id\"\n        [pagination]=\"pagination\"\n        (updateRange)=\"onPagination($event)\">\n      </pagination>\n    </div>\n  `,\n  styles: [`\n    * {\n      font-family: Verdana, serif;\n    }\n\n    .ngx-table__table-row--selected {\n      background: #9cbff9 !important;\n    }\n\n    .ngx-table__table-col--selected {\n      background: #9cbff9 !important;\n    }\n\n    .ngx-table__table-cell--selected {\n      background: #9cbff9 !important;\n    }\n    .ngx-table__table-loader {\n      border: 4px solid #f3f3f3;\n      border-top: 4px solid #3498db;\n      border-radius: 50%;\n      height: 20px;\n      width: 20px;\n      margin-left: auto;\n      margin-right: auto;\n      -webkit-animation: spin 1s linear infinite;\n              animation: spin 1s linear infinite;\n    }\n\n    @-webkit-keyframes spin {\n      0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); }\n      100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); }\n    }\n\n    @keyframes spin {\n      0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); }\n      100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); }\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ResourceService, },\n{type: ChangeDetectorRef, },\n{type: LoggerService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'configuration': [{ type: Input },],\n'data': [{ type: Input },],\n'pagination': [{ type: Input },],\n'groupRowsBy': [{ type: Input },],\n'detailsTemplate': [{ type: Input },],\n'columns': [{ type: Input },],\n'event': [{ type: Output },],\n'rowTemplate': [{ type: ContentChild, args: [TemplateRef, ] },],\n};\n}\n\nfunction BaseComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseComponent.ctorParameters;\n/** @type {?} */\nBaseComponent.propDecorators;\n/** @type {?} */\nBaseComponent.prototype.selectedRow;\n/** @type {?} */\nBaseComponent.prototype.selectedCol;\n/** @type {?} */\nBaseComponent.prototype.term;\n/** @type {?} */\nBaseComponent.prototype.config;\n/** @type {?} */\nBaseComponent.prototype.globalSearchTerm;\n/** @type {?} */\nBaseComponent.prototype.grouped;\n/** @type {?} */\nBaseComponent.prototype.menuActive;\n/** @type {?} */\nBaseComponent.prototype.page;\n/** @type {?} */\nBaseComponent.prototype.count;\n/** @type {?} */\nBaseComponent.prototype.limit;\n/** @type {?} */\nBaseComponent.prototype.selectedDetailsTemplateRowId;\n/** @type {?} */\nBaseComponent.prototype.id;\n/** @type {?} */\nBaseComponent.prototype.configuration;\n/** @type {?} */\nBaseComponent.prototype.data;\n/** @type {?} */\nBaseComponent.prototype.pagination;\n/** @type {?} */\nBaseComponent.prototype.groupRowsBy;\n/** @type {?} */\nBaseComponent.prototype.detailsTemplate;\n/** @type {?} */\nBaseComponent.prototype.columns;\n/** @type {?} */\nBaseComponent.prototype.event;\n/** @type {?} */\nBaseComponent.prototype.rowTemplate;\n/** @type {?} */\nBaseComponent.prototype.resource;\n/** @type {?} */\nBaseComponent.prototype.cdr;\n/** @type {?} */\nBaseComponent.prototype.logger;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Output, EventEmitter } from '@angular/core';\nexport class GlobalSearchComponent {\n   globalUpdate = new EventEmitter();\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'global-search',\n  template: `\n    <label class=\"form-label ngx-float-right\" for=\"search\">\n      <input type=\"text\"\n             id=\"search\"\n             class=\"ngx-table__global-search ngx-form-input ngx-input-sm\"\n             #input\n             (input)=\"globalUpdate.emit({value: input.value})\"\n             placeholder=\"Search\"/>\n    </label>\n  `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'globalUpdate': [{ type: Output },],\n};\n}\n\nfunction GlobalSearchComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nGlobalSearchComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGlobalSearchComponent.ctorParameters;\n/** @type {?} */\nGlobalSearchComponent.propDecorators;\n/** @type {?} */\nGlobalSearchComponent.prototype.globalUpdate;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { ResourceService } from '../services/resource-service';\nexport class GlobalSearchPipe implements PipeTransform {\n/**\n * @param {?} resource\n */\nconstructor(public resource: ResourceService) {\n  }\n/**\n * @param {?} dataArr\n * @param {?} filter\n * @return {?}\n */\ntransform(dataArr, filter) {\n    if (typeof dataArr === 'undefined') {\n      return;\n    }\n    if (typeof filter === 'undefined' || Object.keys(filter).length === 0 || filter === '') {\n      return dataArr;\n    }\n    this.resource.data = [];\n    dataArr.forEach((row) => {\n      for (const /** @type {?} */ value in row) {\n        if (row.hasOwnProperty(value)) {\n          let /** @type {?} */ element;\n          if (typeof row[value] === 'object') {\n            element = JSON.stringify(row[value]).toLocaleLowerCase();\n          }\n          if (typeof row[value] === 'boolean') {\n            element = '' + row[value];\n          }\n          if (typeof row[value] === 'string') {\n            element = row[value].toLocaleLowerCase();\n          }\n          if (typeof row[value] === 'number') {\n            element = '' + row[value];\n          }\n          if (element.indexOf(filter['value'].toLocaleLowerCase()) >= 0) {\n            this.resource.data.push(row);\n            return;\n          }\n        }\n      }\n    });\n\n    return this.resource.data;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'global'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ResourceService, },\n];\n}\n\nfunction GlobalSearchPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nGlobalSearchPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGlobalSearchPipe.ctorParameters;\n/** @type {?} */\nGlobalSearchPipe.prototype.resource;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { ResourceService } from '../services/resource-service';\nexport class SearchPipe implements PipeTransform {\n/**\n * @param {?} resource\n */\nconstructor(public resource: ResourceService) {\n  }\n/**\n * @param {?} value\n * @param {?} filters\n * @return {?}\n */\ntransform(value, filters) {\n    if (typeof value === 'undefined') {\n      return;\n    }\n    this.resource.data = value.slice();\n\n    if (typeof filters === 'undefined' || Object.keys(filters).length === 0) {\n      return this.resource.data;\n    }\n\n    const /** @type {?} */ filtersArr = [];\n    filtersArr[filters.key] = filters.value;\n    value.forEach((item) => {\n      for (const /** @type {?} */ filterKey in filtersArr) {\n        if (filtersArr.hasOwnProperty(filterKey)) {\n          let /** @type {?} */ element = '';\n          if (typeof item[filterKey] === 'string') {\n            element = item[filterKey].toLocaleLowerCase();\n          }\n          if (typeof item[filterKey] === 'object') {\n            element = JSON.stringify(item[filterKey]);\n          }\n          if (typeof item[filterKey] === 'number') {\n            element = item[filterKey].toString();\n          }\n          if (typeof item[filterKey] === 'boolean') {\n            element = item[filterKey].toString();\n          }\n          if (element.indexOf(filtersArr[filterKey].toLocaleLowerCase()) === -1) {\n            this.resource.data.splice(this.resource.data.indexOf(item), 1);\n            return;\n          }\n        }\n      }\n    });\n\n    return this.resource.data;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'search'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ResourceService, },\n];\n}\n\nfunction SearchPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nSearchPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSearchPipe.ctorParameters;\n/** @type {?} */\nSearchPipe.prototype.resource;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nexport class HeaderComponent {\n   column;\n   update = new EventEmitter();\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-header',\n  template: `\n    <label for=\"search_{{ column['key'] }}\">\n      <input type=\"text\"\n             id=\"search_{{ column['key'] }}\"\n             aria-label=\"Search\"\n             placeholder=\"Search {{ column['title'] }}\"\n             class=\"ngx-table__header-search ngx-form-input ngx-input-sm\"\n             #input\n             (input)=\"update.emit({value: input.value, key: column['key']})\"\n      >\n    </label>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'column': [{ type: Input },],\n'update': [{ type: Output },],\n};\n}\n\nfunction HeaderComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nHeaderComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHeaderComponent.ctorParameters;\n/** @type {?} */\nHeaderComponent.propDecorators;\n/** @type {?} */\nHeaderComponent.prototype.column;\n/** @type {?} */\nHeaderComponent.prototype.update;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ChangeDetectionStrategy, Component, EventEmitter, Input, Output, OnInit\n} from '@angular/core';\nimport { ConfigService } from '../../services/config-service';\nimport { Config } from '../../model/config';\nexport class PaginationComponent implements OnInit {\n   pagination;\n   id;\n   updateRange = new EventEmitter();\npublic config: Config;\npublic ranges = [5, 10, 25, 50, 100];\npublic limit = ConfigService.config.rows;\npublic showRange = false;\n/**\n * @param {?} $event\n * @return {?}\n */\nonPageChange($event) {\n    this.updateRange.emit({\n      page: $event,\n      limit: this.limit\n    });\n  }\n/**\n * @param {?} limit\n * @return {?}\n */\nchangeLimit(limit): void {\n    this.showRange = !this.showRange;\n    this.limit = limit;\n    this.updateRange.emit({\n      page: 1,\n      limit: limit\n    });\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this.config = ConfigService.config;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'pagination',\n  template: `\n    <div class=\"ngx-columns\">\n      <div class=\"ngx-col-mr-auto pagination-mobile\">\n        <pagination-controls\n          [id]=\"id\"\n          [maxSize]=\"5\"\n          [previousLabel]=\"''\"\n          [nextLabel]=\"''\"\n          (pageChange)=\"onPageChange($event)\">\n        </pagination-controls>\n      </div>\n      <div class=\"pagination-mobile\" *ngIf=\"config.paginationRangeEnabled\">\n        <div class=\"ngx-dropdown ngx-range-dropdown ngx-float-right\"\n             [class.ngx-active]=\"showRange\"\n             id=\"rowAmount\">\n          <div class=\"ngx-btn-group\">\n            <span class=\"ngx-btn ngx-range-dropdown-button\"\n                  (click)=\"showRange = !showRange\">\n              {{limit}} <i class=\"ngx-icon ngx-icon-arrow-down\"></i>\n            </span>\n            <ul class=\"ngx-menu\">\n              <li class=\"ngx-c-hand ngx-range-dropdown-button\"\n                  (click)=\"changeLimit(limit)\"\n                  *ngFor=\"let limit of ranges\">\n                <span>{{limit}}</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    :host /deep/ pagination-controls > pagination-template > ul > li {\n      border: 1px solid #f0f0f0;\n    }\n    @media screen and (max-width: 480px) {\n      .pagination-mobile {\n        margin-right: auto;\n        margin-left: auto;\n      }\n    }\n\n    .ngx-btn {\n      color: #4f596c;\n      border: 1px solid #f0f0f0;\n    }\n\n    .ngx-range-dropdown {\n      margin-top: 16px;\n    }\n\n    .ngx-range-dropdown-button {\n      padding: 4px;\n    }\n\n    .ngx-menu {\n      min-width: 55px;\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'pagination': [{ type: Input },],\n'id': [{ type: Input },],\n'updateRange': [{ type: Output },],\n};\n}\n\nfunction PaginationComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nPaginationComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPaginationComponent.ctorParameters;\n/** @type {?} */\nPaginationComponent.propDecorators;\n/** @type {?} */\nPaginationComponent.prototype.pagination;\n/** @type {?} */\nPaginationComponent.prototype.id;\n/** @type {?} */\nPaginationComponent.prototype.updateRange;\n/** @type {?} */\nPaginationComponent.prototype.config;\n/** @type {?} */\nPaginationComponent.prototype.ranges;\n/** @type {?} */\nPaginationComponent.prototype.limit;\n/** @type {?} */\nPaginationComponent.prototype.showRange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\nimport { ResourceService } from '../services/resource-service';\nexport class CsvExportComponent {\n/**\n * @param {?} resource\n */\nconstructor(public resource: ResourceService) {\n  }\n/**\n * @return {?}\n */\npublic exportCsv() {\n    const /** @type {?} */ data = this.resource.data;\n    let /** @type {?} */ csvContent = 'data:text/csv;charset=utf-8,';\n    let /** @type {?} */ dataString = '';\n    const /** @type {?} */ x: Array<any> = [];\n    const /** @type {?} */ keys = Object.keys(this.resource.data[0]);\n    data.forEach((row, index) => {\n      x[index] = [];\n      keys.forEach((i) => {\n        if (row.hasOwnProperty(i)) {\n          if (typeof row[i] === 'object') {\n            row[i] = 'Object'; // so far just change object to \"Object\" string\n          }\n          x[index].push(row[i]);\n        }\n      });\n    });\n\n    csvContent += keys + '\\n';\n    x.forEach((row, index) => {\n      dataString = row.join(',');\n      csvContent += index < data.length ? dataString + '\\n' : dataString;\n    });\n    const /** @type {?} */ encodedUri = encodeURI(csvContent);\n    const /** @type {?} */ link = document.createElement('a');\n    link.setAttribute('href', encodedUri);\n    link.setAttribute('download', 'my_data.csv');\n\n    link.click();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'csv-export',\n  template: `\n    <a (click)=\"exportCsv()\">\n      CSV export\n    </a>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ResourceService, },\n];\n}\n\nfunction CsvExportComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nCsvExportComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCsvExportComponent.ctorParameters;\n/** @type {?} */\nCsvExportComponent.prototype.resource;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, EventEmitter, Input, NgModule, Output, Pipe, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nvar PaginationService = (function () {\r\n    function PaginationService() {\r\n        this.change = new EventEmitter();\r\n        this.instances = {};\r\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n    }\r\n    PaginationService.prototype.defaultId = function () { return this.DEFAULT_ID; };\r\n    PaginationService.prototype.register = function (instance) {\r\n        if (!instance.id) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            this.change.emit(instance.id);\r\n        }\r\n        else {\r\n            var changed = this.updateInstance(instance);\r\n            if (changed) {\r\n                this.change.emit(instance.id);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    PaginationService.prototype.updateInstance = function (instance) {\r\n        var changed = false;\r\n        for (var prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    PaginationService.prototype.getCurrentPage = function (id) {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n    };\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    PaginationService.prototype.setCurrentPage = function (id, page) {\r\n        if (this.instances[id]) {\r\n            var instance = this.instances[id];\r\n            var maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    PaginationService.prototype.setTotalItems = function (id, totalItems) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    PaginationService.prototype.setItemsPerPage = function (id, itemsPerPage) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    PaginationService.prototype.getInstance = function (id) {\r\n        if (id === void 0) { id = this.DEFAULT_ID; }\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {};\r\n    };\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    PaginationService.prototype.clone = function (obj) {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n    return PaginationService;\r\n}());\n\nvar LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\nvar PaginatePipe = (function () {\r\n    function PaginatePipe(service) {\r\n        this.service = service;\r\n        // store the values from the last time the pipe was invoked\r\n        this.state = {};\r\n    }\r\n    PaginatePipe.prototype.transform = function (collection, args) {\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (args instanceof Array) {\r\n            // compatible with angular2 before beta16\r\n            args = args[0];\r\n        }\r\n        if (!(collection instanceof Array)) {\r\n            var _id = args.id || this.service.defaultId;\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice;\r\n            }\r\n            else {\r\n                return collection;\r\n            }\r\n        }\r\n        var serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        var instance = this.createInstance(collection, args);\r\n        var id = instance.id;\r\n        var start, end;\r\n        var perPage = instance.itemsPerPage;\r\n        this.service.register(instance);\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n            var isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice;\r\n            }\r\n            else {\r\n                var slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice;\r\n            }\r\n        }\r\n        // save the state for server-side collection to avoid null\r\n        // flash as new data loads.\r\n        this.saveState(id, collection, collection, start, end);\r\n        return collection;\r\n    };\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    PaginatePipe.prototype.createInstance = function (collection, args) {\r\n        var config = args;\r\n        this.checkConfig(config);\r\n        return {\r\n            id: config.id || this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length\r\n        };\r\n    };\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    PaginatePipe.prototype.checkConfig = function (config) {\r\n        var required = ['itemsPerPage', 'currentPage'];\r\n        var missing = required.filter(function (prop) { return !(prop in config); });\r\n        if (0 < missing.length) {\r\n            throw new Error(\"PaginatePipe: Argument is missing the following required properties: \" + missing.join(', '));\r\n        }\r\n    };\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    PaginatePipe.prototype.saveState = function (id, collection, slice, start, end) {\r\n        this.state[id] = {\r\n            collection: collection,\r\n            size: collection.length,\r\n            slice: slice,\r\n            start: start,\r\n            end: end\r\n        };\r\n    };\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    PaginatePipe.prototype.stateIsIdentical = function (id, collection, start, end) {\r\n        var state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        var isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n        return state.slice.every(function (element, index) { return element === collection[start + index]; });\r\n    };\r\n    PaginatePipe.decorators = [\r\n        { type: Pipe, args: [{\r\n                    name: 'paginate',\r\n                    pure: false\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    PaginatePipe.ctorParameters = function () { return [\r\n        { type: PaginationService, },\r\n    ]; };\r\n    return PaginatePipe;\r\n}());\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\nvar DEFAULT_TEMPLATE = \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\">\\n    <ul class=\\\"ngx-pagination\\\" \\n        role=\\\"navigation\\\" \\n        [attr.aria-label]=\\\"screenReaderPaginationLabel\\\" \\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a *ngIf=\\\"1 < p.getCurrent()\\\" (click)=\\\"p.previous()\\\" [attr.aria-label]=\\\"previousLabel + ' ' + screenReaderPageLabel\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" *ngFor=\\\"let page of p.pages\\\">\\n            <a (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ page.label }}</span>\\n            </a>\\n            <div *ngIf=\\\"p.getCurrent() === page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ page.label }}</span> \\n            </div>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a *ngIf=\\\"!p.isLastPage()\\\" (click)=\\\"p.next()\\\" [attr.aria-label]=\\\"nextLabel + ' ' + screenReaderPageLabel\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </pagination-template>\\n    \";\r\nvar DEFAULT_STYLES = \"\\n.ngx-pagination {\\n  margin-left: 0;\\n  margin-bottom: 1rem; }\\n  .ngx-pagination::before, .ngx-pagination::after {\\n    content: ' ';\\n    display: table; }\\n  .ngx-pagination::after {\\n    clear: both; }\\n  .ngx-pagination li {\\n    -moz-user-select: none;\\n    -webkit-user-select: none;\\n    -ms-user-select: none;\\n    margin-right: 0.0625rem;\\n    border-radius: 0; }\\n  .ngx-pagination li {\\n    display: inline-block; }\\n  .ngx-pagination a,\\n  .ngx-pagination button {\\n    color: #0a0a0a; \\n    display: block;\\n    padding: 0.1875rem 0.625rem;\\n    border-radius: 0; }\\n    .ngx-pagination a:hover,\\n    .ngx-pagination button:hover {\\n      background: #e6e6e6; }\\n  .ngx-pagination .current {\\n    padding: 0.1875rem 0.625rem;\\n    background: #2199e8;\\n    color: #fefefe;\\n    cursor: default; }\\n  .ngx-pagination .disabled {\\n    padding: 0.1875rem 0.625rem;\\n    color: #cacaca;\\n    cursor: default; } \\n    .ngx-pagination .disabled:hover {\\n      background: transparent; }\\n  .ngx-pagination .ellipsis::after {\\n    content: '\\u2026';\\n    padding: 0.1875rem 0.625rem;\\n    color: #0a0a0a; }\\n  .ngx-pagination a, .ngx-pagination button {\\n    cursor: pointer; }\\n\\n.ngx-pagination .pagination-previous a::before,\\n.ngx-pagination .pagination-previous.disabled::before { \\n  content: '\\u00AB';\\n  display: inline-block;\\n  margin-right: 0.5rem; }\\n\\n.ngx-pagination .pagination-next a::after,\\n.ngx-pagination .pagination-next.disabled::after {\\n  content: '\\u00BB';\\n  display: inline-block;\\n  margin-left: 0.5rem; }\\n\\n.ngx-pagination .show-for-sr {\\n  position: absolute !important;\\n  width: 1px;\\n  height: 1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0); }\";\n\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\nvar PaginationControlsComponent = (function () {\r\n    function PaginationControlsComponent() {\r\n        this.maxSize = 7;\r\n        this.previousLabel = 'Previous';\r\n        this.nextLabel = 'Next';\r\n        this.screenReaderPaginationLabel = 'Pagination';\r\n        this.screenReaderPageLabel = 'page';\r\n        this.screenReaderCurrentLabel = \"You're on page\";\r\n        this.pageChange = new EventEmitter();\r\n        this._directionLinks = true;\r\n        this._autoHide = false;\r\n    }\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"directionLinks\", {\r\n        get: function () {\r\n            return this._directionLinks;\r\n        },\r\n        set: function (value) {\r\n            this._directionLinks = !!value && value !== 'false';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"autoHide\", {\r\n        get: function () {\r\n            return this._autoHide;\r\n        },\r\n        set: function (value) {\r\n            this._autoHide = !!value && value !== 'false';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PaginationControlsComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'pagination-controls',\r\n                    template: DEFAULT_TEMPLATE,\r\n                    styles: [DEFAULT_STYLES],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    encapsulation: ViewEncapsulation.None\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    PaginationControlsComponent.ctorParameters = function () { return []; };\r\n    PaginationControlsComponent.propDecorators = {\r\n        'id': [{ type: Input },],\r\n        'maxSize': [{ type: Input },],\r\n        'directionLinks': [{ type: Input },],\r\n        'autoHide': [{ type: Input },],\r\n        'previousLabel': [{ type: Input },],\r\n        'nextLabel': [{ type: Input },],\r\n        'screenReaderPaginationLabel': [{ type: Input },],\r\n        'screenReaderPageLabel': [{ type: Input },],\r\n        'screenReaderCurrentLabel': [{ type: Input },],\r\n        'pageChange': [{ type: Output },],\r\n    };\r\n    return PaginationControlsComponent;\r\n}());\n\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\nvar PaginationControlsDirective = (function () {\r\n    function PaginationControlsDirective(service, changeDetectorRef) {\r\n        var _this = this;\r\n        this.service = service;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.maxSize = 7;\r\n        this.pageChange = new EventEmitter();\r\n        this.pages = [];\r\n        this.changeSub = this.service.change\r\n            .subscribe(function (id) {\r\n            if (_this.id === id) {\r\n                _this.updatePageLinks();\r\n                _this.changeDetectorRef.markForCheck();\r\n                _this.changeDetectorRef.detectChanges();\r\n            }\r\n        });\r\n    }\r\n    PaginationControlsDirective.prototype.ngOnInit = function () {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnChanges = function (changes) {\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnDestroy = function () {\r\n        this.changeSub.unsubscribe();\r\n    };\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    PaginationControlsDirective.prototype.previous = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    };\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    PaginationControlsDirective.prototype.next = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    };\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    PaginationControlsDirective.prototype.isFirstPage = function () {\r\n        return this.getCurrent() === 1;\r\n    };\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    PaginationControlsDirective.prototype.isLastPage = function () {\r\n        return this.getLastPage() === this.getCurrent();\r\n    };\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.setCurrent = function (page) {\r\n        this.pageChange.emit(page);\r\n    };\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.getCurrent = function () {\r\n        return this.service.getCurrentPage(this.id);\r\n    };\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    PaginationControlsDirective.prototype.getLastPage = function () {\r\n        var inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    };\r\n    PaginationControlsDirective.prototype.checkValidId = function () {\r\n        if (!this.service.getInstance(this.id).id) {\r\n            console.warn(\"PaginationControlsDirective: the specified id \\\"\" + this.id + \"\\\" does not match any registered PaginationInstance\");\r\n        }\r\n    };\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    PaginationControlsDirective.prototype.updatePageLinks = function () {\r\n        var _this = this;\r\n        var inst = this.service.getInstance(this.id);\r\n        var correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(function () {\r\n                _this.setCurrent(correctedCurrentPage);\r\n                _this.pages = _this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, _this.maxSize);\r\n            });\r\n        }\r\n        else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    };\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    PaginationControlsDirective.prototype.outOfBoundCorrection = function (instance) {\r\n        var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        }\r\n        else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n        return instance.currentPage;\r\n    };\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    PaginationControlsDirective.prototype.createPageArray = function (currentPage, itemsPerPage, totalItems, paginationRange) {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        var pages = [];\r\n        var totalPages = Math.ceil(totalItems / itemsPerPage);\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        var isStart = currentPage <= halfWay;\r\n        var isEnd = totalPages - halfWay < currentPage;\r\n        var isMiddle = !isStart && !isEnd;\r\n        var ellipsesNeeded = paginationRange < totalPages;\r\n        var i = 1;\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            var label = void 0;\r\n            var pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            var openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            var closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            }\r\n            else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i++;\r\n        }\r\n        return pages;\r\n    };\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    PaginationControlsDirective.prototype.calculatePageNumber = function (i, currentPage, paginationRange, totalPages) {\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        }\r\n        else if (i === 1) {\r\n            return i;\r\n        }\r\n        else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            }\r\n            else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    };\r\n    PaginationControlsDirective.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'pagination-template,[pagination-template]',\r\n                    exportAs: 'paginationApi'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    PaginationControlsDirective.ctorParameters = function () { return [\r\n        { type: PaginationService, },\r\n        { type: ChangeDetectorRef, },\r\n    ]; };\r\n    PaginationControlsDirective.propDecorators = {\r\n        'id': [{ type: Input },],\r\n        'maxSize': [{ type: Input },],\r\n        'pageChange': [{ type: Output },],\r\n    };\r\n    return PaginationControlsDirective;\r\n}());\n\nvar NgxPaginationModule = (function () {\r\n    function NgxPaginationModule() {\r\n    }\r\n    NgxPaginationModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [CommonModule],\r\n                    declarations: [\r\n                        PaginatePipe,\r\n                        PaginationControlsComponent,\r\n                        PaginationControlsDirective\r\n                    ],\r\n                    providers: [PaginationService],\r\n                    exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgxPaginationModule.ctorParameters = function () { return []; };\r\n    return NgxPaginationModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DEFAULT_STYLES as ɵb, DEFAULT_TEMPLATE as ɵa, NgxPaginationModule, PaginationService, PaginationControlsComponent, PaginationControlsDirective, PaginatePipe };\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BaseComponent } from './base.component';\nimport { GlobalSearchComponent } from '../global-search/global-search.component';\nimport { GlobalSearchPipe } from '../../pipes/global-search-pipe';\nimport { SearchPipe } from '../../pipes/header-pipe';\nimport { HeaderComponent } from '../header/header.component';\nimport { PaginationComponent } from '../pagination/pagination.component';\nimport { CsvExportComponent } from '../csv-export.component';\nimport { NgxPaginationModule } from 'ngx-pagination';\nexport class BaseModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    BaseComponent,\n    GlobalSearchComponent,\n    CsvExportComponent,\n    HeaderComponent,\n    PaginationComponent,\n    SearchPipe,\n    GlobalSearchPipe\n  ],\n  imports: [\n    CommonModule,\n    NgxPaginationModule\n  ],\n  exports: [BaseComponent]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { BaseComponent } from './components/base/base.component';\nimport { BaseModule } from './components/base/base.module';\nimport { CommonModule } from '@angular/common';\nexport class TableModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    BaseModule,\n  ],\n  bootstrap: [BaseComponent],\n  exports: [BaseComponent],\n  providers: []\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TableModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTableModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTableModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["ResourceService","this","data","order","prototype","sortBy","key","_this","Object","keys","length","sort","a","b","compare","isNaN","parseFloat","isFinite","toLowerCase","decorators","type","Injectable","ctorParameters","ConfigService","config","searchEnabled","headerEnabled","orderEnabled","globalSearchEnabled","paginationEnabled","exportEnabled","clickEvent","selectRow","selectCol","selectCell","rows","additionalActions","serverPagination","isLoading","detailsTemplate","groupRows","paginationRangeEnabled","Event","onPagination","onOrder","onGlobalSearch","onSearch","onClick","LoggerService","error","message","console","warn","info","log","debug","BaseComponent","resource","cdr","logger","grouped","menuActive","page","count","selectedDetailsTemplateRowId","event","EventEmitter","id","Math","floor","random","ngOnInit","configuration","limit","groupRowsBy","Observable","from","groupBy","row","flatMap","group","reduce","acc","curr","concat","subscribe","push","ngAfterViewInit","detectChanges","ngOnChanges","changes","pagination","currentValue","slice","orderBy","clickedCell","$event","colIndex","rowIndex","selectedRow","selectedCol","value","rowId","colId","emitEvent","toggleColumn","toggleColumns","Set","columns","has","delete","add","term","globalSearchTerm","JSON","stringify","emit","selectRowId","Component","args","selector","providers","template","styles","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","propDecorators","Input","Output","rowTemplate","ContentChild","TemplateRef","GlobalSearchComponent","globalUpdate","GlobalSearchPipe","transform","dataArr","filter","forEach","hasOwnProperty","element","toLocaleLowerCase","indexOf","Pipe","name","SearchPipe","filters","filtersArr","item","filterKey","toString","splice","HeaderComponent","update","column","PaginationComponent","updateRange","ranges","showRange","onPageChange","changeLimit","CsvExportComponent","exportCsv","csvContent","dataString","x","index","i","join","encodedUri","encodeURI","link","document","createElement","setAttribute","click","PaginationService","change","instances","DEFAULT_ID","defaultId","register","instance","updateInstance","changed","prop","getCurrentPage","currentPage","setCurrentPage","ceil","totalItems","itemsPerPage","setTotalItems","setItemsPerPage","getInstance","clone","obj","target","LARGE_NUMBER","Number","MAX_SAFE_INTEGER","PaginatePipe","service","state","collection","Array","_id","start","end","serverSideMode","createInstance","perPage","stateIsIdentical","saveState","checkConfig","missing","Error","size","every","pure","PaginationControlsComponent","maxSize","previousLabel","nextLabel","screenReaderPaginationLabel","screenReaderPageLabel","screenReaderCurrentLabel","pageChange","_directionLinks","_autoHide","defineProperty","get","set","enumerable","configurable","encapsulation","ViewEncapsulation","None","directionLinks","autoHide","PaginationControlsDirective","changeDetectorRef","pages","changeSub","updatePageLinks","markForCheck","undefined","ngOnDestroy","unsubscribe","previous","checkValidId","setCurrent","getCurrent","next","isFirstPage","isLastPage","getLastPage","inst","correctedCurrentPage","outOfBoundCorrection","setTimeout","createPageArray","totalPages","paginationRange","halfWay","isStart","isEnd","isMiddle","ellipsesNeeded","label","pageNumber","calculatePageNumber","Directive","exportAs","NgxPaginationModule","NgModule","imports","CommonModule","declarations","exports","BaseModule","TableModule","bootstrap"],"mappings":"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"}
